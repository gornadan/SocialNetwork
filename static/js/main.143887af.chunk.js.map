{"version":3,"sources":["component/Header/Header.module.css","component/Profile/Myposts/Post/Posts.module.css","component/Profile/Myposts/Myposts.module.css","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Header/Header.tsx","component/Navbar/Navbar.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.tsx","component/Profile/Myposts/Post/Posts.tsx","component/Profile/Myposts/MyPosts.tsx","component/Profile/Myposts/MyPostsContainer.tsx","component/Profile/Profile.tsx","redux/dialogsReducer.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Dialogs.tsx","component/Dialogs/DialogsContainer.tsx","App.tsx","redux/sidebarReducer.tsx","redux/reduxStore.tsx","index.tsx","component/Navbar/Navbar.module.css","component/Dialogs/Dialogs.module.css"],"names":["module","exports","Header","className","classes","header","pic","src","Navbar","nav","item","to","activeClassName","activeLink","ProfileInfo","descriptionBlock","initialState","posts","id","likeCount","message","newPostText","Posts","props","alt","MyPosts","postsElements","map","p","newPostElement","React","createRef","console","log","postsBlock","onChange","current","text","value","updateNewPostText","ref","buttonSave","onClick","addPost","MyPostsContainer","connect","state","profilePage","dispatch","type","newText","Profile","dialogs","name","messages","newMessageBody","Message","DialogItem","dialog","active","Dialogs","dialogsElements","dialogsPage","messagesElements","newMessageElement","dialogsItem","e","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","newMessage","App","path","render","reducers","combineReducers","action","newPost","push","body","sidebarPage","store","createStore","renderEntireTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.143887af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3agPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__2kBCa\",\"posts\":\"Posts_posts__29I5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__1MY7D\",\"buttonSave\":\"Myposts_buttonSave__2W4xl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pszp\"};","import React from 'react';\r\nimport classes from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return <header className={classes.header}>\r\n        <img className={classes.pic} src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ17IautckWSx6-VDw0UI7NAMIDsEqkOZ3i5g&usqp=CAU'/>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\"  activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/messages\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/setting\" activeClassName={classes.activeLink}>Setting</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return <div>\r\n        <div>\r\n            <img src='http://proklumbu.com/wp-content/uploads/2017/06/tomswallpapers.com-9250.jpg'/>\r\n        </div>\r\n        <div>\r\n            <img\r\n                src='http://185504.selcdn.ru/static/mv-flowers.reshop.by/catalog/404/16942458315ec39932dd4b7_medium.jpg'/>\r\n        </div>\r\n        <div className={classes.descriptionBlock}> ava + description</div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\";\r\n\r\nexport type ProfileActionsTypes =\r\n    ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof UpdateNewPostTextAC>\r\n\r\n export type PostsType = {\r\n    id: number\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\n export type InitialStateTypeProfile = typeof initialState\r\n    // posts: Array<PostsType>\r\n    // newPostText: string\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, likeCount: 215, message: \"Hi!!!\"},\r\n        {id: 2, likeCount: 10, message: \"Hello!!\"},\r\n        {id: 3, likeCount: 15, message: \"How are you&\"},\r\n        {id: 4, likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ] as Array<PostsType>,\r\n    newPostText: \"it-kamasutra.com\" as string\r\n}\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST\r\n}\r\nexport const AddPostAC = (): AddPostACType => { return {type: ADD_POST}}\r\n\r\ntype UpdateNewPostTextACType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}\r\n\r\nexport const UpdateNewPostTextAC = (newText: string): UpdateNewPostTextACType => {\r\n    return {\r\n        type:  UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    } };\r\n\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: any): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 5,\r\n                likeCount: 0,\r\n                message: state.newPostText\r\n            };\r\n            state.posts.push(newPost);\r\n            state.newPostText = '';\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.newPostText = action.newText;\r\n            return state;\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\r\nimport classes from './Posts.module.css'\r\n\r\n\r\ntype PostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n\r\n}\r\n\r\nconst Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.posts}>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://cdn21.img.ria.ru/images/152706/30/1527063075_0:0:1920:1080_600x0_80_0_0_1619231de06a6127896bcf26500c320d.jpg\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like </span>{props.likeCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\nimport Posts from \"./Post/Posts\";\r\nimport classes from \"./Myposts.module.css\"\r\nimport { PostsType} from \"../../../redux/state\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    // dispatch: (action: ProfileActionsTypes) => vo\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n\r\n}\r\n\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Posts message={p.message} likeCount={p.likeCount}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    console.log(newPostElement);\r\n\r\n\r\n    let addPost = () => {\r\n             props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current.value\r\n            props.updateNewPostText(text)\r\n            console.log(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div>\r\n                <h3>My Post</h3>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.buttonSave} onClick={addPost}>Add post</button>\r\n\r\n                </div>\r\n            </div>\r\n            {postsElements}\r\n        </div>)\r\n\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\n\r\nimport {AddPostAC, PostsType, ProfileActionsTypes, UpdateNewPostTextAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {SendMessageAC, UpdateNewMessageBodyAC} from \"../../../redux/dialogsReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\n// type PostsType = {\r\n//     id: number\r\n//     likeCount: number\r\n//     message: string\r\n// }\r\n\r\n// type MyPostsPropsType = {\r\n//      // store: Store\r\n//     // posts: Array<PostsType>\r\n//     // newPostText: string\r\n//     // dispatch: (action: ProfileActionsTypes) => void\r\n//     // addPost: () => void\r\n//     // updateNewPostText: (text: string) => void\r\n// }\r\n\r\n\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//\r\n//                     let state = store.getState()\r\n//                     let addPost = () => {\r\n//                         store.dispatch(AddPostAC())\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = UpdateNewPostTextAC(text)\r\n//                         store.dispatch(action)\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <MyPosts updateNewPostText={onPostChange}\r\n//                                  addPost={addPost}\r\n//                                  posts={state.profilePage.posts}\r\n//                                  newPostText={state.profilePage.newPostText}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\n type MapDispatchToPropsType = {\r\n     addPost: () => void\r\n     updateNewPostText: (text: string) => void\r\n\r\n }\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        updateNewPostText: (text: string) => {\r\n            dispatch(UpdateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, Store>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from './Profile.module.css'\r\nimport MyPosts from \"./Myposts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileActionsTypes} from \"../../redux/profileReducer\";\r\nimport {ProfilePageType} from \"../../redux/state\"\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\nimport {Store} from \"redux\";\r\n\r\ntype ProfilePropsType = {\r\n     // store: Store\r\n    // posts: Array<PostsType>\r\n\r\n     // profilePage: ProfilePageType\r\n     // dispatch: (action: ProfileActionsTypes) => void\r\n}\r\n\r\n\r\nconst Profile  = () => {\r\n    /*let posts = [\r\n        {likeCount: 215, message: \"Hi!!!\"},\r\n        {likeCount: 10, message: \"Hello!!\"},\r\n        {likeCount: 15, message: \"How are you&\"},\r\n        {likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ];*/\r\n    return <div>\r\n        <ProfileInfo />\r\n        {/*<MyPosts newPostText={props.profilePage.newPostText}*/}\r\n                 {/*posts={props.profilePage.posts}*/}\r\n                 {/*dispatch={props.dispatch}*/}\r\n\r\n        {/*/>*/}\r\n        <MyPostsContainer    />\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY_TEXT = \"UPDATE_NEW_MESSAGE_BODY_TEXT\"\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof UpdateNewMessageBodyAC>\r\n    | ReturnType<typeof SendMessageAC>\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateTypeDialogs = typeof initialState;\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Natallia\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Ksenya\"},\r\n        {id: 4, name: \"Danila\"}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi!!!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo-Yo-Yo!!!\"},\r\n        {id: 4, message: \"Yo-Yo-Yo!!!\"}\r\n    ] as Array<MessagesType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\ntype UpdateNewMessageBodyACType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_BODY_TEXT\r\n    newMessage: string\r\n}\r\n\r\nexport const UpdateNewMessageBodyAC = (newMessage: string): UpdateNewMessageBodyACType => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY_TEXT,\r\n        newMessage: newMessage\r\n    }\r\n}\r\n\r\ntype SendMessageACType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\n\r\nexport const SendMessageAC = (): SendMessageACType => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: any): InitialStateTypeDialogs => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY_TEXT:\r\n            state.newMessageBody = action.newMessage;\r\n            return state;\r\n\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            state.messages.push({id: 6, message: body});\r\n            state.newMessageBody = \"\";\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string,\r\n    id: number\r\n}\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/1\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {\r\n    ActionsTypes, InitialStateTypeDialogs,\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport {DialogPageType} from \"../../redux/state\"\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(message => <Message message={message.message} id={message.id}/>);\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (newMessageElement.current) {\r\n            let text = newMessageElement.current.value\r\n            props.updateNewMessageBody(text)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.message}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                 <textarea onChange={onMessageChange} ref={newMessageElement}\r\n                           value={props.dialogsPage.newMessageBody}\r\n                           placeholder={\"Enter your message\"}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {DialogPageType} from \"../../redux/state\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\n// const DialogsContainer = () => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//                     let state = store.getState();\r\n//\r\n//\r\n//                     let onSendMessageClick = () => {\r\n//                         store.dispatch(SendMessageAC(state.newMessageBody))\r\n//                     }\r\n//\r\n//                     let onMessageChange = (text: string) => {\r\n//                         store.dispatch(UpdateNewMessageBodyAC(text))\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <Dialogs\r\n//                                  dialogsPage={state.dialogsPage}\r\n//                                  updateNewMessageBody={onMessageChange}\r\n//                                  sendMessage={onSendMessageClick}\r\n//                                  // newMessageBody={state.dialogsPage.newMessageBody}\r\n//                         />)\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(SendMessageAC())\r\n        },\r\n        updateNewMessageBody: (text: string) => {\r\n            dispatch(UpdateNewMessageBodyAC(text))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer;","import React from \"react\";\nimport './App.css';\nimport Header from \"./component/Header/Header\";\nimport Navbar from \"./component/Navbar/Navbar\";\nimport Profile from \"./component/Profile/Profile\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Dialogs from \"./component/Dialogs/Dialogs\";\nimport {RootStateType, StoreType} from \"./redux/state\";\nimport {Store} from \"redux\";\nimport DialogsContainer from \"./component/Dialogs/DialogsContainer\";\n\ntype AppPropsType = {\n    store: Store\n\n}\nconst App = (props: any) => {\n\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path=\"/profile\" render={() => <Profile />}/>\n                <Route path=\"/messages\" render={() => <DialogsContainer   />}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport type InitialStateTypeSidebar = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): InitialStateTypeSidebar => {\r\n    return state\r\n}","import React from 'react';\r\nimport {AnyAction, CombinedState, combineReducers, createStore, Store} from \"redux\";\r\nimport {InitialStateTypeProfile, profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer, InitialStateTypeDialogs} from \"./dialogsReducer\";\r\nimport {InitialStateTypeSidebar, sidebarReducer} from \"./sidebarReducer\";\r\n\r\ntype ReducersType = {\r\n    profilePage: InitialStateTypeProfile,\r\n    dialogsPage: InitialStateTypeDialogs,\r\n    sidebarPage: InitialStateTypeSidebar\r\n}\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer\r\n})\r\n\r\nlet store: Store  = createStore(reducers);\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {Provider} from \"react-redux\";\n\n\n\n// type PropsType = {\n//     store: Store\n//\n// }\n\nlet renderEntireTree = () => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App   />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root'));\n}\n\nrenderEntireTree();\nstore.subscribe(() => {\n    renderEntireTree()\n});\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1hzsM\",\"item\":\"Navbar_item__eAPnU\",\"activeLink\":\"Navbar_activeLink__2ZU1O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3psTL\",\"dialogsItem\":\"Dialogs_dialogsItem__1J_bq\",\"active\":\"Dialogs_active__1nRMj\",\"messages\":\"Dialogs_messages__G7lBl\"};"],"sourceRoot":""}