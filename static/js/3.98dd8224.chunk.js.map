{"version":3,"sources":["component/Profile/ProfileInfo/ProfileInfo.module.css","component/Profile/Myposts/Post/Posts.module.css","component/Profile/Myposts/Myposts.module.css","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/Myposts/Post/Posts.tsx","component/Profile/Myposts/MyPosts.tsx","component/Profile/Myposts/MyPostsContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","className","classes","descriptionBlock","alt","src","profile","photos","large","Posts","posts","item","message","likeCount","MyPosts","React","memo","postsElements","map","p","key","id","postsBlock","MyPostFormRedux","onSubmit","text","addPost","newPostText","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","buttonSave","MyPostsContainer","connect","state","profilePage","dispatch","AddPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Preloader","Component","compose","isAuth","auth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,uB,oBCArDD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,WAAa,8B,uHC8CzDC,EApCgB,SAACC,GAA8B,IAAD,EAC3BC,oBAAS,GADkB,mBACpDC,EADoD,KAC1CC,EAD0C,OAE/BF,mBAASD,EAAMI,QAFgB,mBAEpDA,EAFoD,KAE5CC,EAF4C,KAIzDC,qBAAU,WAEFD,EAAUL,EAAMI,UACrB,CAACJ,EAAMI,SAeV,OAAO,8BACDF,GACF,6BACI,0BAAMK,cAhBY,WACtBJ,GAAY,KAegCC,GAAU,cAErDF,GACD,6BACI,2BAAOM,SAXM,SAACC,GAClBJ,EAAUI,EAAEC,cAAcC,QAUWC,WAAW,EACvCC,OAjBY,WACtBV,GAAY,GACXH,EAAMc,aAAaV,IAekBO,MAAOP,OCLrCW,EAvBK,SAACf,GACjB,OAAO,6BAQH,yBAAKgB,UAAWC,IAAQC,kBACpB,yBAAKC,IAAK,MAAOC,IAAKpB,EAAMqB,QAAQC,OAAOC,QAE3C,kBAAC,EAAD,CAAyBnB,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,kB,0BCGhEU,EAlByB,SAACxB,GAErC,OACI,yBAAKgB,UAAWC,IAAQQ,OACpB,yBAAKT,UAAWC,IAAQS,MACpB,yBACIN,IAAI,uHACJD,IAAI,QACPnB,EAAM2B,QACP,6BACI,uCAAmB3B,EAAM4B,c,oDCGvCC,EAAUC,IAAMC,MAAK,SAAC/B,GACxB,IAAIgC,EAAgBhC,EAAMyB,MAAMQ,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAOP,QAASO,EAAEP,QAASC,UAAWM,EAAEN,UAAWO,IAAKD,EAAEE,QAqBnG,OACI,yBAAKpB,UAAWC,IAAQoB,YACpB,6BACI,uCACJ,kBAACC,EAAD,CAAiBC,SARP,SAACC,GACfxC,EAAMyC,QAAQD,EAAKE,iBASdV,MAKPW,EAAcC,YAAiB,IAkB/BN,EAAkBO,YAA0B,CAACC,KAAM,eAAjCD,EAhBL,SAAC7C,GAChB,OACI,0BAAMuC,SAAUvC,EAAM+C,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,KAAM,cACNC,YAAa,kBACpBC,SAAU,CAACC,IAAUX,MAEzB,6BACI,4BAAQ3B,UAAWC,IAAQsC,YAA3B,iBAQD1B,I,QClCA2B,EAFUC,aAnBH,SAACC,GACnB,MAAO,CACHjC,MAAOiC,EAAMC,YAAYlC,MACzBiB,YAAagB,EAAMC,YAAYjB,gBAId,SAACkB,GACtB,MAAO,CAEHnB,QAAS,SAACC,GACNkB,EAASC,YAAUnB,QAQNe,CAA6C5B,GCTvDiC,EAhBC,SAAC9D,GAEb,OAAO,6BACH,kBAAC,EAAD,CAAaqB,QAASrB,EAAMqB,QAASjB,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,eAM/E,kBAAC,EAAD,Q,sBCFFiD,E,kLAGG,IAAIC,EAASC,KAAKjE,MAAMkE,MAAMC,OAAOH,OAClCA,IACCA,EAASC,KAAKjE,MAAMoE,mBAEhBH,KAAKjE,MAAMqE,QAAQC,KAAK,UAGhCL,KAAKjE,MAAMuE,eAAeP,GAC3BC,KAAKjE,MAAMwE,UAAUR,K,+BAKjB,OAA2B,OAAvBC,KAAKjE,MAAMqB,QACJ,kBAACoD,EAAA,EAAD,MAGJ,kBAAC,EAAD,iBAAeR,KAAKjE,MAApB,CACWqB,QAAS4C,KAAKjE,MAAMqB,QACpBjB,OAAQ6D,KAAKjE,MAAMI,OACnBU,aAAcmD,KAAKjE,MAAMc,oB,GAvBxBgB,IAAM4C,WAyCtBC,sBAA6BlB,aAXtB,SAACC,GACnB,MAAO,CACHrC,QAASqC,EAAMC,YAAYtC,QAC3BuD,OAAQlB,EAAMmB,KAAKD,OACnBxE,OAAQsD,EAAMC,YAAYvD,OAC1BgE,iBAAkBV,EAAMmB,KAAKzC,MAOjC,CAACmC,mBAAgBC,cAAW1D,mBAC5BgE,IAFWH,CAECZ","file":"static/js/3.98dd8224.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pszp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__2kBCa\",\"posts\":\"Posts_posts__29I5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__1MY7D\",\"buttonSave\":\"Myposts_buttonSave__2W4xl\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\n\r\ntype ProfileStatusType = {\r\n    //profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n\r\n            setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    let  activateEditMode  =  () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    let deactivateEditMode = () => {\r\n       setEditMode(false)\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    let onStatusChange = (e:React.FormEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return <div>\r\n        {!editMode &&\r\n        <div>\r\n            <span onDoubleClick={activateEditMode}>{status || \"---------\"}</span>\r\n        </div>}\r\n        {editMode &&\r\n        <div>\r\n            <input onChange={onStatusChange} autoFocus={true}\r\n                 onBlur={deactivateEditMode} value={status} />\r\n        </div>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    // status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    return <div>\r\n        {/*<div>*/}\r\n        {/*<img src='http://proklumbu.com/wp-content/uploads/2017/06/tomswallpapers.com-9250.jpg'/>*/}\r\n        {/*</div>*/}\r\n        {/*<div>*/}\r\n        {/*<img*/}\r\n        {/*src='http://185504.selcdn.ru/static/mv-flowers.reshop.by/catalog/404/16942458315ec39932dd4b7_medium.jpg'/>*/}\r\n        {/*</div>*/}\r\n        <div className={classes.descriptionBlock}>\r\n            <img alt={\"img\"} src={props.profile.photos.large}/>\r\n            {/*<ProfileStatusWithHooks profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>*/}\r\n            <ProfileStatusWithHooks  status={props.status} updateStatus={props.updateStatus}/>\r\n            {/*<div >{props.profile.status}</div>*/}\r\n            {/*ava + description</div>*/}\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Posts.module.css'\r\n\r\n\r\ntype PostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n\r\n}\r\n\r\nconst Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.posts}>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://cdn21.img.ria.ru/images/152706/30/1527063075_0:0:1920:1080_600x0_80_0_0_1619231de06a6127896bcf26500c320d.jpg\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like </span>{props.likeCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\nimport Posts from \"./Post/Posts\";\r\nimport classes from \"./Myposts.module.css\"\r\nimport {PostsType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps,  reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    // newPostText: string\r\n    // dispatch: (action: ProfileActionsTypes) => vo\r\n    addPost: (newPostText: string) => void\r\n    // updateNewPostText: (text: string) => void\r\n\r\n}\r\n\r\ntype MyPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Posts message={p.message} likeCount={p.likeCount} key={p.id}/>);\r\n\r\n    // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    // console.log(newPostElement);\r\n\r\n\r\n    // let addPost = () => {\r\n    //     props.addPost()\r\n    // }\r\n\r\n    // let onPostChange = () => {\r\n    //     if (newPostElement.current) {\r\n    //         let text = newPostElement.current.value\r\n    //         props.updateNewPostText(text)\r\n    //         console.log(text)\r\n    //     }\r\n    // };\r\n    let addPostText = (text: MyPostFormType) => {\r\n        props.addPost(text.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div>\r\n                <h3>My Post</h3>\r\n            <MyPostFormRedux onSubmit={addPostText}/>\r\n            </div>\r\n            {postsElements}\r\n        </div>)\r\n\r\n})\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst MyPostForm = (props: InjectedFormProps<MyPostFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       placeholder={\"Enter your post\"}\r\n                validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button className={classes.buttonSave}>Add post</button>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MyPostFormRedux = reduxForm<MyPostFormType>({form: \"addPostText\"})(MyPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\n\r\nimport {AddPostAC, PostsType} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\n type MapDispatchToPropsType = {\r\n     addPost: (newPostText: string) => void\r\n     // updateNewPostText: (text: string) => void\r\n\r\n }\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n\r\n        addPost: (newPostText: string) => {\r\n            dispatch(AddPostAC(newPostText))\r\n        },\r\n        // updateNewPostText: (text: string) => {\r\n        //     dispatch(UpdateNewPostTextAC(text))\r\n        // }\r\n    }\r\n}\r\n// const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, Store>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { ProfileType} from \"../../redux/profileReducer\";\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    // posts: Array<PostsType>\r\n    // newPostText: string\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        {/*<MyPosts newPostText={props.profilePage.newPostText}*/}\r\n        {/*posts={props.profilePage.posts}*/}\r\n        {/*dispatch={props.dispatch}*/}\r\n\r\n        {/*/>*/}\r\n        <MyPostsContainer/>\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profileReducer\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport { withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType =  {\r\n    profile: ProfileType | null,\r\n    isAuth: boolean,\r\n    status: string,\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype ProfilePropsType = {\r\n    profile:  ProfileType | null\r\n    setUserProfile: (profile: ProfileType) => void\r\n    userId: number\r\n}\r\n\r\nclass ProfileContainer extends React.Component <any>{\r\n    componentDidMount () {\r\n\r\n         let userId = this.props.match.params.userId;\r\n        if(!userId){\r\n             userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                 this.props.history.push(\"/login\")\r\n            }\r\n         }\r\n         this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n            if (this.props.profile === null){\r\n               return  <Preloader />\r\n            } else {\r\n\r\n            return <Profile   {...this.props}\r\n                              profile={this.props.profile}\r\n                              status={this.props.status}\r\n                              updateStatus={this.props.updateStatus}\r\n                               />}\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect (mapStateToProps,\r\n    {getUserProfile, getStatus, updateStatus}),\r\n    withRouter)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}