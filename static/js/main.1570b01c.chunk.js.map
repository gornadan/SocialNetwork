{"version":3,"sources":["redux/dialogsReducer.tsx","component/Users/Users.module.css","component/Users/User/User.module.css","assets/img/images.png","assets/img/load.gif","component/Navbar/Navbar.module.css","api/api.ts","component/Navbar/Navbar.tsx","redux/usersReducer.tsx","component/common/Paginator/Paginators.tsx","component/Users/User/User.tsx","component/Users/Users.tsx","redux/usersSelectors.ts","component/Users/UsersContainer.tsx","component/Header/Header.tsx","redux/authReducer.tsx","component/Header/HeaderContainer.tsx","component/Login/Login.tsx","redux/appReducer.tsx","hoc/withSuspense.tsx","App.tsx","redux/sidebarReducer.tsx","redux/reduxStore.tsx","index.tsx","component/common/FormsControl/FormsControl.module.css","component/common/Preloader.tsx","component/common/FormsControl/FormsControl.tsx","component/Header/Header.module.css","utils/validators.ts","redux/profileReducer.tsx"],"names":["initialState","dialogs","id","name","messages","message","newMessageBody","SendMessageAC","type","dialogsReducer","state","action","body","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","responce","data","follow","userId","post","unFollow","delete","getProfile","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Navbar","className","classes","nav","item","to","activeClassName","activeLink","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageSize","onClick","filter","p","map","key","selectedPage","User","props","user","alt","src","photos","small","userPhoto","followed","disabled","some","Users","u","getUsersSuperSelector","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","this","Preloader","React","Component","connect","dispatch","a","resultCode","items","totalCount","Header","header","pic","loginBlock","isAuth","SET_USER_DATA","setAuthUserData","getAuthUserData","response","HeaderContainer","auth","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","required","error","s","formSummaryError","length","stopSubmit","_error","useSelector","formData","initialized","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","compose","app","promise","Promise","all","withRouter","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebarPage","formReducer","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","preloader","Textarea","input","meta","hasError","touched","styles","formControl","value","maxLengthCreator","maxLength","posts","likeCount","newPostText","profile","AddPostAC","SetStatus","newPost","postId","getUserProfile"],"mappings":"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","file":"static/js/main.1570b01c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {string} from \"prop-types\";\r\n\r\n\r\n\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type ActionsTypes = ReturnType<typeof SendMessageAC>\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nexport type InitialStateTypeDialogs = typeof initialState;\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Natallia\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Ksenya\"},\r\n        {id: 4, name: \"Danila\"}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi!!!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo-Yo-Yo!!!\"},\r\n        {id: 4, message: \"Yo-Yo-Yo!!!\"}\r\n    ] as Array<MessagesType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\n// type UpdateNewMessageBodyACType = {\r\n//     type: typeof UPDATE_NEW_MESSAGE_BODY_TEXT\r\n//     newMessage: string\r\n// }\r\n\r\n// export const UpdateNewMessageBodyAC = (newMessage: string): UpdateNewMessageBodyACType => {\r\n//     return {\r\n//         type: UPDATE_NEW_MESSAGE_BODY_TEXT,\r\n//         newMessage: newMessage\r\n//     }\r\n// }\r\n\r\ntype SendMessageACType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\n\r\nexport const SendMessageAC = (newMessageBody: string): SendMessageACType => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody: newMessageBody\r\n    }\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateTypeDialogs => {\r\n\r\n    switch (action.type) {\r\n        // case UPDATE_NEW_MESSAGE_BODY_TEXT:\r\n        //    return {\r\n        //         ...state,\r\n        //         newMessageBody: action.newMessage\r\n        //     };\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n           return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n                // newMessageBody: \"\"\r\n            };\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__F-xz9\",\"selectedPage\":\"Users_selectedPage__wIp0u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"User_userPhoto__3SZ8d\",\"selectedPage\":\"User_selectedPage__e96He\"};","module.exports = __webpack_public_path__ + \"static/media/images.7b938c6b.png\";","module.exports = __webpack_public_path__ + \"static/media/load.a1cd24dd.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1hzsM\",\"item\":\"Navbar_item__eAPnU\",\"activeLink\":\"Navbar_activeLink__2ZU1O\"};","import axios from \"axios\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:{\r\n        \"API-KEY\": \"ce69a53b-250c-4758-9c20-f08aa69b3abd\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number , pageSize: number ) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(responce => {\r\n            return responce.data\r\n        })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n\r\n    unFollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId)\r\n\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/`+ userId )\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/`+ userId );\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status} );\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    me () {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login (email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout () {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/messages\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/setting\" activeClassName={classes.activeLink}>Setting</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\n\r\nexport type UsersActionsTypes =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    followed: boolean\r\n    status: string | null\r\n    photos: { small: string, large: string }\r\n    uniqueUrlName: null | string\r\n}\r\n\r\nexport type InitialStateTypeUsers = typeof initialState\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 15,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n\r\n}\r\ntype FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowACType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId: userId\r\n    }\r\n};\r\n\r\ntype UnFollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const unFollowSuccess = (userId: number): UnFollowACType => {\r\n    return {type: UNFOLLOW, userId}\r\n};\r\n\r\ntype SetUsersACType = {\r\n    type: 'SET_USERS'\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType => {\r\n    return {type: SET_USERS, users}\r\n}\r\n\r\ntype SetCurrentPageACType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n}\r\n\r\ntype SetTotalUsersCountACType = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => {\r\n    return {type: SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n}\r\n\r\ntype ToggleIsFetchingACType = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n};\r\n\r\ntype toggleFollowingProgressACType = {\r\n    type: \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): toggleFollowingProgressACType => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsTypes): InitialStateTypeUsers => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n\r\n\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {...state, users: action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n        case  TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            };\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n};\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let response = await usersAPI.follow(userId);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccess(userId));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n\r\n    };\r\n}\r\nexport const unFollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let response = await usersAPI.unFollow(userId);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccess(userId));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n","import React, {useState} from \"react\";\r\nimport classes from \"../../Users/Users.module.css\";\r\n\r\nexport type PaginatorType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    onPageChanged: (page: number) => void,\r\n    currentPage: number,\r\n    portionSize?: number\r\n}\r\n\r\n\r\n\r\nlet Paginator: React.FC<PaginatorType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 15 } ) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageSize = portionNumber * portionSize\r\n    return <div>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {setPortionNumber(portionNumber-1)}}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageSize)\r\n            .map(p => {\r\n            return <span\r\n                key={p}\r\n                onClick={() => {\r\n                   onPageChanged(p)\r\n                }}\r\n                className={p === currentPage ? classes.selectedPage : \"\"}>{p}</span>\r\n        })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={\r\n            () => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }\r\n        }>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport {UsersType} from \"../../../redux/usersReducer\";\r\nimport classes from \"./User.module.css\";\r\nimport userPhoto from \"../../../assets/img/images.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UserPropsTypes = {\r\n    user: UsersType,\r\n    followingInProgress: number[],\r\n    unFollow: (userId: number) => void,\r\n    follow: (userId: number) => void\r\n\r\n}\r\n\r\nlet User = (props: UserPropsTypes) => {\r\n    return <div>\r\n       <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + props.user.id}>\r\n                    <img alt={'user'} src={props.user.photos.small != null ? props.user.photos.small : userPhoto} className={classes.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {props.user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                  onClick={() => {props.unFollow(props.user.id)}}>UnFollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                  onClick={() => { props.follow( props.user.id)}}>Follow</button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n                <span>\r\n                 <span>\r\n                     <div>{props.user.name}</div>\r\n                     <div>{props.user.status}</div>\r\n                 </span>\r\n                 <span><div>{\"city\"}</div>\r\n                     <div>{\"u.location.country\"}</div>\r\n                 </span>\r\n            </span>\r\n            </div>)\r\n\r\n    </div>\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/usersReducer\";\r\nimport Paginator from \"../common/Paginator/Paginators\";\r\nimport User from \"./User/User\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n}\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n    return <div>\r\n        <Paginator totalItemsCount={props.totalUsersCount} pageSize={props.pageSize} onPageChanged={props.onPageChanged}\r\n                   currentPage={props.currentPage}/>\r\n        {\r\n            props.users.map(u => <User user={u}\r\n                                       key={u.id}\r\n                                       follow={props.follow}\r\n                                       unFollow={props.unFollow}\r\n                                       followingInProgress={props.followingInProgress}/>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport {AppStateType} from \"./reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UsersType} from \"./usersReducer\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n};\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsersSelector, (users:  Array<UsersType>) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n};","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage, toggleFollowingProgress, unFollow, UsersType\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSuperSelector\r\n} from \"../../redux/usersSelectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n\r\n}\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    followingInProgress: Array<number>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users users={this.props.users}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   onPageChanged={this.onPageChanged}\r\n                   followingInProgress={this.props.followingInProgress}\r\n\r\n\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unFollow,\r\n    setCurrentPage,\r\n    toggleFollowingProgress,\r\n    getUsers: getUsers\r\n})(UsersContainer);","import React from 'react';\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props: any) => {\r\n    return <header className={classes.header}>\r\n        <img alt={\"img\"} className={classes.pic} src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ17IautckWSx6-VDw0UI7NAMIDsEqkOZ3i5g&usqp=CAU'/>\r\n        <div className={classes.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Logout</button></div>\r\n            :<NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\";\r\n\r\ntype SetUserDataType = {\r\n    type: typeof SET_USER_DATA\r\n    data: InitialStateType\r\n}\r\n\r\nexport type ActionsTypes = ReturnType<typeof setAuthUserData>\r\n\r\n\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\n\r\n\r\nlet initialState = {\r\n    id: -1,\r\n    email: null,\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean): SetUserDataType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n}\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email, isAuth} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    } else {\r\n        dispatch(setAuthUserData(-1, \"\", \"\", false));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    id: number| null\r\n    email: string | null\r\n    login: string |null\r\n    isAuth: boolean\r\n}\r\n\r\nclass HeaderContainer extends React.Component <any> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({...state.auth})\r\n\r\nexport default connect(mapStateToProps, {logout}) (HeaderContainer);","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {connect, useSelector} from 'react-redux';\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport s from \"../common/FormsControl/FormsControl.module.css\"\r\n\r\ntype LoginFormPropsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm = (props: InjectedFormProps<LoginFormPropsType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field placeholder={\"Email\"}\r\n                        name={\"email\"}\r\n                        component={Input}\r\n            validate={[required]}/>\r\n            </div>\r\n            <div><Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                        validate={[required]}\r\n                        component={Input}/></div>\r\n            <div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me</div>\r\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormPropsType>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string,  rememberMe: boolean ) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType ) => {\r\n    const onSubmitLogin = (formData: LoginFormPropsType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    };\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    if(isAuth) {\r\n        return<Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmitLogin}/>\r\n    </div>\r\n};\r\n\r\n\r\nexport default connect(null, {login})(Login);","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./authReducer\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\ntype InitializedSuccessType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n};\r\n\r\nexport type ActionsTypes = ReturnType<typeof initializedSuccess>\r\n\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n};\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => {\r\n    return {type: INITIALIZED_SUCCESS }\r\n};\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>\r\n\r\nexport  const initializeApp = ():ThunkType => (dispatch) => {\r\n   let promise =  dispatch( getAuthUserData());\r\n    Promise.all([promise]).then(() => {dispatch(initializedSuccess())})\r\n};\r\n\r\n","import React, {ComponentType, Suspense} from 'react';\r\nimport Preloader from \"../component/common/Preloader\";\r\n\r\n\r\n\r\nexport function withSuspense<T>(Component: React.ComponentType<T>) {\r\n\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n\r\n\r\n}","import React, {Suspense} from \"react\";\nimport './App.css';\nimport Navbar from \"./component/Navbar/Navbar\";\nimport {Route, withRouter} from \"react-router-dom\";\nimport UsersContainer from \"./component/Users/UsersContainer\";\nimport HeaderContainer from \"./component/Header/HeaderContainer\";\nimport Login from \"./component/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport {AppStateType} from \"./redux/reduxStore\";\nimport Preloader from \"./component/common/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\nconst DialogsContainer = React.lazy(() => import('./component/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./component/Profile/ProfileContainer'));\n\n\ntype AppComponentType = {\n    initialized: boolean\n    initializeApp: () => void\n};\n\nclass App extends React.Component<AppComponentType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\n                    <Route path=\"/messages\" render={withSuspense(DialogsContainer)}/>\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n});\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}), withRouter)(App)\n","import React from 'react';\r\n\r\nexport type InitialStateTypeSidebar = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): InitialStateTypeSidebar => {\r\n    return state\r\n}","import React from 'react';\r\nimport {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport {InitialStateTypeProfile, profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer, InitialStateTypeDialogs} from \"./dialogsReducer\";\r\nimport {InitialStateTypeSidebar, sidebarReducer} from \"./sidebarReducer\";\r\nimport {InitialStateTypeUsers, usersReducer} from \"./usersReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\n\r\ntype ReducersType = {\r\n    profilePage: InitialStateTypeProfile,\r\n    dialogsPage: InitialStateTypeDialogs,\r\n    sidebarPage: InitialStateTypeSidebar,\r\n    usersPage: InitialStateTypeUsers\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    app: appReducer,\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store: Store  = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {Provider} from \"react-redux\";\n\n\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <App   />\n            </Provider>\n        </HashRouter>,\n        document.getElementById('root'));\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__icpjj\",\"error\":\"FormsControl_error__3zoaO\",\"formSummaryError\":\"FormsControl_formSummaryError__3ckDw\"};","import React from \"react\";\r\nimport preloader from './../../assets/img/load.gif'\r\n\r\ntype PreloaderType = {\r\n\r\n}\r\n\r\nlet Preloader: React.FC<PreloaderType> = (props) => {\r\n    return (\r\n        <>\r\n            <img src={preloader} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, {InputHTMLAttributes} from 'react';\r\nimport styles from './FormsControl.module.css'\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\n\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\r\n            <div><textarea {...input}{...props}/></div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\r\n            <div><input {...input}{...props}/></div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3agPC\",\"loginBlock\":\"Header_loginBlock__3fMbI\"};","import React from 'react';\r\n\r\n\r\nexport const required = (value: string) => {\r\n    if(value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if( value.length > maxLength) return `Max length is ${maxLength} symbol`;\r\n\r\n    return undefined;\r\n}","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\n// const UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\n\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    status: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n\r\n}\r\n\r\nexport type ProfileActionsTypes =\r\n    ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof deletePostAC>\r\n    // | ReturnType<typeof UpdateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof SetStatus>\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, likeCount: 215, message: \"Hi!!!\"},\r\n        {id: 2, likeCount: 10, message: \"Hello!!\"},\r\n        {id: 3, likeCount: 15, message: \"How are you&\"},\r\n        {id: 4, likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ] as Array<PostsType>,\r\n    newPostText: \"it-kamasutra.com\",\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nexport type InitialStateTypeProfile = typeof initialState\r\n\r\n\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n}\r\nexport const AddPostAC = (newPostText: string): AddPostACType => {\r\n    return {type: ADD_POST, newPostText}\r\n}\r\ntype DeletePostACType = {\r\n    type: typeof DELETE_POST,\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId: number): DeletePostACType => {\r\n    return {type: DELETE_POST, postId}\r\n}\r\n\r\n// type UpdateNewPostTextACType = {\r\n//     type: typeof UPDATE_NEW_POST_TEXT\r\n//     newText: string\r\n// }\r\n\r\n// export const UpdateNewPostTextAC = (newText: string): UpdateNewPostTextACType => {\r\n//     return {\r\n//         type: UPDATE_NEW_POST_TEXT,\r\n//         newText: newText\r\n//     }\r\n// };\r\n\r\ntype SetUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType | null\r\n\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType | null): SetUserProfileACType => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile: profile\r\n    }\r\n};\r\ntype SetStatusACType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n\r\n}\r\n\r\nexport const SetStatus = (status: string): SetStatusACType => {\r\n    return {type: SET_STATUS, status}\r\n};\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                likeCount: 0,\r\n                message: action.newPostText\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n\r\n        }\r\n        // case UPDATE_NEW_POST_TEXT: {\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     };\r\n        // }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n};\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(SetStatus(response.data));\r\n};\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n\r\n    if (response.data.resultCode === 1) {\r\n        dispatch(SetStatus(status));\r\n    }\r\n};"],"sourceRoot":""}