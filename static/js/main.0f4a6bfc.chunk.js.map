{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Header/Header.module.css","component/Users/Users.module.css","component/Profile/Myposts/Post/Posts.module.css","component/Profile/Myposts/Myposts.module.css","assets/img/images.png","assets/img/load.gif","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Navbar/Navbar.module.css","component/Header/Header.tsx","component/Navbar/Navbar.tsx","redux/dialogsReducer.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Dialogs.tsx","component/Dialogs/DialogsContainer.tsx","redux/usersReducer.tsx","component/Users/Users.tsx","component/common/Preloader.tsx","component/Users/UsersContainer.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.tsx","component/Profile/Myposts/Post/Posts.tsx","component/Profile/Myposts/MyPosts.tsx","component/Profile/Myposts/MyPostsContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx","App.tsx","redux/sidebarReducer.tsx","redux/reduxStore.tsx","index.tsx"],"names":["module","exports","Header","className","classes","header","pic","src","Navbar","nav","item","to","activeClassName","activeLink","initialState","dialogs","id","name","messages","message","newMessageBody","Message","props","DialogItem","dialog","active","Dialogs","dialogsElements","dialogsPage","map","key","messagesElements","newMessageElement","React","createRef","dialogsItem","onChange","e","current","text","value","updateNewMessageBody","ref","placeholder","onClick","sendMessage","DialogsContainer","connect","state","dispatch","type","newMessage","users","pageSize","totalUsersCount","currentPage","isFetching","Users","pagesCount","Math","ceil","pages","i","push","p","onPageChanged","selectedPage","u","photos","small","userPhoto","followed","unFollow","follow","status","Preloader","preloader","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","totalCount","Component","usersPage","userId","ProfileInfo","descriptionBlock","profile","large","posts","likeCount","newPostText","Posts","alt","MyPosts","postsElements","newPostElement","console","log","postsBlock","updateNewPostText","buttonSave","addPost","MyPostsContainer","profilePage","newText","Profile","ProfileContainer","setUserProfile","App","path","render","reducers","combineReducers","action","newPost","body","sidebarPage","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0f4a6bfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3psTL\",\"dialogsItem\":\"Dialogs_dialogsItem__1J_bq\",\"active\":\"Dialogs_active__1nRMj\",\"messages\":\"Dialogs_messages__G7lBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3agPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__F-xz9\",\"selectedPage\":\"Users_selectedPage__wIp0u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__2kBCa\",\"posts\":\"Posts_posts__29I5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__1MY7D\",\"buttonSave\":\"Myposts_buttonSave__2W4xl\"};","module.exports = __webpack_public_path__ + \"static/media/images.7b938c6b.png\";","module.exports = __webpack_public_path__ + \"static/media/load.a1cd24dd.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pszp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1hzsM\",\"item\":\"Navbar_item__eAPnU\",\"activeLink\":\"Navbar_activeLink__2ZU1O\"};","import React from 'react';\r\nimport classes from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return <header className={classes.header}>\r\n        <img className={classes.pic} src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ17IautckWSx6-VDw0UI7NAMIDsEqkOZ3i5g&usqp=CAU'/>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/messages\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/setting\" activeClassName={classes.activeLink}>Setting</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY_TEXT = \"UPDATE_NEW_MESSAGE_BODY_TEXT\"\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof UpdateNewMessageBodyAC>\r\n    | ReturnType<typeof SendMessageAC>\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nexport type InitialStateTypeDialogs = typeof initialState;\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Natallia\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Ksenya\"},\r\n        {id: 4, name: \"Danila\"}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi!!!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo-Yo-Yo!!!\"},\r\n        {id: 4, message: \"Yo-Yo-Yo!!!\"}\r\n    ] as Array<MessagesType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\ntype UpdateNewMessageBodyACType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_BODY_TEXT\r\n    newMessage: string\r\n}\r\n\r\nexport const UpdateNewMessageBodyAC = (newMessage: string): UpdateNewMessageBodyACType => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY_TEXT,\r\n        newMessage: newMessage\r\n    }\r\n}\r\n\r\ntype SendMessageACType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\n\r\nexport const SendMessageAC = (): SendMessageACType => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: any): InitialStateTypeDialogs => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY_TEXT:\r\n           return {\r\n                ...state,\r\n                newMessageBody: action.newMessage\r\n            };\r\n\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n           return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n                newMessageBody: \"\"\r\n            };\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string,\r\n    id: number\r\n}\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/1\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {\r\n    ActionsTypes, DialogPageType, InitialStateTypeDialogs,\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/> );\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(message => <Message message={message.message} id={message.id} key={message.id}/>);\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (newMessageElement.current) {\r\n            let text = newMessageElement.current.value\r\n            props.updateNewMessageBody(text)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.message}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                 <textarea onChange={onMessageChange} ref={newMessageElement}\r\n                           value={props.dialogsPage.newMessageBody}\r\n                           placeholder={\"Enter your message\"}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n    DialogPageType,\r\n\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch, Store} from \"redux\";\r\n\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(SendMessageAC())\r\n        },\r\n        updateNewMessageBody: (text: string) => {\r\n            dispatch(UpdateNewMessageBodyAC(text))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\n\r\n\r\nexport type UsersActionsTypes =\r\n    ReturnType<typeof followAC>\r\n    | ReturnType<typeof unFollowAC>\r\n    | SetUsersACType\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n    | ReturnType<typeof toggleIsFetchingAC>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    followed: boolean\r\n    status: string | null\r\n    photos: { small: string, large: string }\r\n    uniqueUrlName: null | string\r\n}\r\n\r\nexport type InitialStateTypeUsers = typeof initialState\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false\r\n\r\n}\r\ntype FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n\r\n}\r\n\r\nexport const followAC = (userId: number): FollowACType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId: userId\r\n    }\r\n};\r\n\r\ntype UnFollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const unFollowAC = (userId: number): UnFollowACType => {\r\n    return {type: UNFOLLOW, userId}\r\n};\r\n\r\ntype SetUsersACType = {\r\n    type: 'SET_USERS'\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsersAC = (users: Array<UsersType>): SetUsersACType => {\r\n    return {type: SET_USERS, users}\r\n}\r\n\r\ntype SetCurrentPageACType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\nexport const setCurrentPageAC = (currentPage: number): SetCurrentPageACType => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n}\r\n\r\ntype SetTotalUsersCountACType = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCountAC = (totalUsersCount: number): SetTotalUsersCountACType => {\r\n    return {type: SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n}\r\n\r\ntype ToggleIsFetchingACType = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsTypes): InitialStateTypeUsers => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n\r\n\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {...state, users: action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\n","import React from \"react\";\r\nimport {UsersType} from \"../../redux/usersReducer\";\r\nimport classes from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/img/images.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n\r\n                return <span\r\n                    onClick={() => {\r\n                        props.onPageChanged(p)\r\n                    }}\r\n                    className={p === props.currentPage ? classes.selectedPage : \"\"}>{p}</span>\r\n            })}\r\n        </div>\r\n\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile' + u.id}>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={classes.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button onClick={() => {\r\n                            props.unFollow(u.id)\r\n                        }}>UnFollow</button>\r\n                        : <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>Follow</button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n                <span>\r\n                 <span>\r\n                     <div>{u.name}</div>\r\n                     <div>{u.status}</div>\r\n                 </span>\r\n                 <span><div>{\"city\"}</div>\r\n                     <div>{\"u.location.country\"}</div>\r\n                 </span>\r\n            </span>\r\n            </div>)\r\n        }</div>\r\n}\r\n\r\nexport default Users;","import React from \"react\";\r\nimport preloader from './../../assets/img/load.gif'\r\n\r\ntype PreloaderType = {\r\n\r\n}\r\n\r\nlet Preloader: React.FC<PreloaderType> = (props) => {\r\n    return (\r\n        <>\r\n            <img src={preloader} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC, toggleIsFetchingAC,\r\n    unFollowAC,\r\n    UsersType\r\n} from \"../../redux/usersReducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\n// type MapDispatchToPropsType = {\r\n//     follow: (userId: number) => void\r\n//     unFollow: (userId: number) => void\r\n//     setUsers: (users: Array<UsersType>) => void\r\n//     setCurrentPage: (currentPage: number) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     toggleIsFetching: (isFetching: boolean) => void\r\n//\r\n// }\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                debugger;\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                debugger;\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null }\r\n            <Users users={this.props.users}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   onPageChanged={this.onPageChanged}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow: followAC,\r\n    unFollow: unFollowAC,\r\n    setUsers: setUsersAC,\r\n    setCurrentPage: setCurrentPageAC,\r\n    setTotalUsersCount: setTotalUsersCountAC,\r\n    toggleIsFetching: toggleIsFetchingAC\r\n})(UsersContainer);","import React from 'react';\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    return <div>\r\n        <div>\r\n            <img src='http://proklumbu.com/wp-content/uploads/2017/06/tomswallpapers.com-9250.jpg'/>\r\n        </div>\r\n        <div>\r\n            <img\r\n                src='http://185504.selcdn.ru/static/mv-flowers.reshop.by/catalog/404/16942458315ec39932dd4b7_medium.jpg'/>\r\n        </div>\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n            <div >{props.profile.status}</div>\r\n            ava + description</div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\n\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype PhotosType  = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    status: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n     photos: PhotosType\r\n\r\n}\r\n\r\nexport type ProfileActionsTypes =\r\n    ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof UpdateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfileAC>\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, likeCount: 215, message: \"Hi!!!\"},\r\n        {id: 2, likeCount: 10, message: \"Hello!!\"},\r\n        {id: 3, likeCount: 15, message: \"How are you&\"},\r\n        {id: 4, likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ] as Array<PostsType>,\r\n    newPostText: \"it-kamasutra.com\",\r\n    profile: null as ProfileType | null\r\n}\r\n\r\nexport type InitialStateTypeProfile = typeof initialState\r\n\r\n\r\n\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST\r\n}\r\nexport const AddPostAC = (): AddPostACType => {\r\n    return {type: ADD_POST}\r\n}\r\n\r\ntype UpdateNewPostTextACType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}\r\n\r\nexport const UpdateNewPostTextAC = (newText: string): UpdateNewPostTextACType => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    }\r\n};\r\n\r\ntype SetUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType | null\r\n\r\n}\r\n\r\nexport const setUserProfileAC = (profile: ProfileType | null ): SetUserProfileACType => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile: profile\r\n\r\n    }\r\n};\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                likeCount: 0,\r\n                message: state.newPostText\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\r\nimport classes from './Posts.module.css'\r\n\r\n\r\ntype PostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n\r\n}\r\n\r\nconst Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.posts}>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://cdn21.img.ria.ru/images/152706/30/1527063075_0:0:1920:1080_600x0_80_0_0_1619231de06a6127896bcf26500c320d.jpg\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like </span>{props.likeCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\nimport Posts from \"./Post/Posts\";\r\nimport classes from \"./Myposts.module.css\"\r\nimport {PostsType} from \"../../../redux/profileReducer\";\r\n\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    // dispatch: (action: ProfileActionsTypes) => vo\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n\r\n}\r\n\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Posts message={p.message} likeCount={p.likeCount} key={p.id}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    console.log(newPostElement);\r\n\r\n\r\n    let addPost = () => {\r\n             props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current.value\r\n            props.updateNewPostText(text)\r\n            console.log(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div>\r\n                <h3>My Post</h3>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.buttonSave} onClick={addPost}>Add post</button>\r\n\r\n                </div>\r\n            </div>\r\n            {postsElements}\r\n        </div>)\r\n\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\n\r\nimport {AddPostAC, PostsType, ProfileActionsTypes, UpdateNewPostTextAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {SendMessageAC, UpdateNewMessageBodyAC} from \"../../../redux/dialogsReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\n// type PostsType = {\r\n//     id: number\r\n//     likeCount: number\r\n//     message: string\r\n// }\r\n\r\n// type MyPostsPropsType = {\r\n//      // store: Store\r\n//     // posts: Array<PostsType>\r\n//     // newPostText: string\r\n//     // dispatch: (action: ProfileActionsTypes) => void\r\n//     // addPost: () => void\r\n//     // updateNewPostText: (text: string) => void\r\n// }\r\n\r\n\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//\r\n//                     let state = store.getState()\r\n//                     let addPost = () => {\r\n//                         store.dispatch(AddPostAC())\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = UpdateNewPostTextAC(text)\r\n//                         store.dispatch(action)\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <MyPosts updateNewPostText={onPostChange}\r\n//                                  addPost={addPost}\r\n//                                  posts={state.profilePage.posts}\r\n//                                  newPostText={state.profilePage.newPostText}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\n type MapDispatchToPropsType = {\r\n     addPost: () => void\r\n     updateNewPostText: (text: string) => void\r\n\r\n }\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        updateNewPostText: (text: string) => {\r\n            dispatch(UpdateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, Store>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { ProfileType} from \"../../redux/profileReducer\";\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    // posts: Array<PostsType>\r\n    // newPostText: string\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile}/>\r\n        {/*<MyPosts newPostText={props.profilePage.newPostText}*/}\r\n        {/*posts={props.profilePage.posts}*/}\r\n        {/*dispatch={props.dispatch}*/}\r\n\r\n        {/*/>*/}\r\n        <MyPostsContainer/>\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Profile;","import React, {ReactNode} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {PostsType, ProfileType, setUserProfileAC} from \"../../redux/profileReducer\";\r\nimport Preloader from \"../common/Preloader\";\r\n\r\n\r\ntype MapStateToPropsType =  {\r\n    profile: ProfileType | null\r\n       // posts: Array<PostsType>\r\n    // newPostText: string\r\n}\r\n\r\ntype ProfilePropsType = {\r\n    // posts:  Array<PostsType>\r\n    // newPostText: string\r\n    profile:  ProfileType | null\r\n    setUserProfile: (profile: ProfileType) => void\r\n\r\n\r\n\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component <ProfilePropsType>{\r\n    componentDidMount () {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/22`)\r\n            .then(response => {\r\n\r\n                this.props.setUserProfile(response.data)\r\n            })\r\n    }\r\n\r\n    render() {\r\ndebugger;\r\n            if (this.props.profile === null){\r\n               return  <Preloader />\r\n            } else {\r\n\r\n            return <Profile   {...this.props}\r\n                              profile={this.props.profile}\r\n                               />}\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n         // posts: state.profilePage.posts,\r\n         // newPostText: state.profilePage.newPostText,\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {\r\n    setUserProfile: setUserProfileAC})(ProfileContainer);","import React from \"react\";\nimport './App.css';\nimport Header from \"./component/Header/Header\";\nimport Navbar from \"./component/Navbar/Navbar\";\nimport { Route} from \"react-router-dom\";\nimport DialogsContainer from \"./component/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./component/Users/UsersContainer\";\nimport ProfileContainer from \"./component/Profile/ProfileContainer\";\n\n// type AppPropsType = {\n//     store: Store\n//\n// }\nconst App = () => {\n\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path=\"/profile\" render={() => <ProfileContainer />}/>\n                <Route path=\"/messages\" render={() => <DialogsContainer   />}/>\n                <Route path=\"/users\" render={() => <UsersContainer/>}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport type InitialStateTypeSidebar = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): InitialStateTypeSidebar => {\r\n    return state\r\n}","import React from 'react';\r\nimport {AnyAction, CombinedState, combineReducers, createStore, Store} from \"redux\";\r\nimport {InitialStateTypeProfile, profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer, InitialStateTypeDialogs} from \"./dialogsReducer\";\r\nimport {InitialStateTypeSidebar, sidebarReducer} from \"./sidebarReducer\";\r\nimport {InitialStateTypeUsers, usersReducer} from \"./usersReducer\";\r\n\r\ntype ReducersType = {\r\n    profilePage: InitialStateTypeProfile,\r\n    dialogsPage: InitialStateTypeDialogs,\r\n    sidebarPage: InitialStateTypeSidebar,\r\n    usersPage: InitialStateTypeUsers\r\n}\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nlet store: Store  = createStore(reducers);\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {Provider} from \"react-redux\";\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App   />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root'));\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  reportWebVitals();\n"],"sourceRoot":""}