{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Header/Header.module.css","component/Profile/Myposts/Post/Posts.module.css","component/Profile/Myposts/Myposts.module.css","component/Users/Users.module.css","component/Profile/ProfileInfo/ProfileInfo.module.css","assets/img/images.png","assets/img/load.gif","component/Navbar/Navbar.module.css","component/Header/Header.tsx","component/Navbar/Navbar.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.tsx","component/Profile/Myposts/Post/Posts.tsx","component/Profile/Myposts/MyPosts.tsx","component/Profile/Myposts/MyPostsContainer.tsx","component/Profile/Profile.tsx","redux/dialogsReducer.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Dialogs.tsx","component/Dialogs/DialogsContainer.tsx","redux/usersReducer.tsx","component/Users/Users.tsx","component/Users/UsersContainer.tsx","App.tsx","redux/sidebarReducer.tsx","redux/reduxStore.tsx","index.tsx"],"names":["module","exports","Header","className","classes","header","pic","src","Navbar","nav","item","to","activeClassName","activeLink","ProfileInfo","descriptionBlock","initialState","posts","id","likeCount","message","newPostText","Posts","props","alt","MyPosts","postsElements","map","p","key","newPostElement","React","createRef","console","log","postsBlock","onChange","current","text","value","updateNewPostText","ref","buttonSave","onClick","addPost","MyPostsContainer","connect","state","profilePage","dispatch","type","newText","Profile","dialogs","name","messages","newMessageBody","Message","DialogItem","dialog","active","Dialogs","dialogsElements","dialogsPage","messagesElements","newMessageElement","dialogsItem","e","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","newMessage","users","pageSize","totalUsersCount","currentPage","isFetching","Users","pagesCount","Math","ceil","pages","i","push","onPageChanged","selectedPage","u","photos","small","userPhoto","followed","unFollow","follow","status","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","totalCount","preLoader","Component","usersPage","userId","followAC","unFollowAC","setUsersAC","setCurrentPageAC","toggleIsFetchingAC","App","path","render","reducers","combineReducers","action","newPost","body","sidebarPage","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.40c9c9dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3psTL\",\"dialogsItem\":\"Dialogs_dialogsItem__1J_bq\",\"active\":\"Dialogs_active__1nRMj\",\"messages\":\"Dialogs_messages__G7lBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3agPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__2kBCa\",\"posts\":\"Posts_posts__29I5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__1MY7D\",\"buttonSave\":\"Myposts_buttonSave__2W4xl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__F-xz9\",\"selectedPage\":\"Users_selectedPage__wIp0u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pszp\"};","module.exports = __webpack_public_path__ + \"static/media/images.7b938c6b.png\";","module.exports = __webpack_public_path__ + \"static/media/load.a1cd24dd.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1hzsM\",\"item\":\"Navbar_item__eAPnU\",\"activeLink\":\"Navbar_activeLink__2ZU1O\"};","import React from 'react';\r\nimport classes from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return <header className={classes.header}>\r\n        <img className={classes.pic} src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ17IautckWSx6-VDw0UI7NAMIDsEqkOZ3i5g&usqp=CAU'/>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/messages\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/setting\" activeClassName={classes.activeLink}>Setting</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return <div>\r\n        <div>\r\n            <img src='http://proklumbu.com/wp-content/uploads/2017/06/tomswallpapers.com-9250.jpg'/>\r\n        </div>\r\n        <div>\r\n            <img\r\n                src='http://185504.selcdn.ru/static/mv-flowers.reshop.by/catalog/404/16942458315ec39932dd4b7_medium.jpg'/>\r\n        </div>\r\n        <div className={classes.descriptionBlock}> ava + description</div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\";\r\n\r\nexport type ProfileActionsTypes =\r\n    ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof UpdateNewPostTextAC>\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\nexport type InitialStateTypeProfile = typeof initialState\r\n// posts: Array<PostsType>\r\n// newPostText: string\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, likeCount: 215, message: \"Hi!!!\"},\r\n        {id: 2, likeCount: 10, message: \"Hello!!\"},\r\n        {id: 3, likeCount: 15, message: \"How are you&\"},\r\n        {id: 4, likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ] as Array<PostsType>,\r\n    newPostText: \"it-kamasutra.com\" as string\r\n}\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST\r\n}\r\nexport const AddPostAC = (): AddPostACType => {\r\n    return {type: ADD_POST}\r\n}\r\n\r\ntype UpdateNewPostTextACType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n}\r\n\r\nexport const UpdateNewPostTextAC = (newText: string): UpdateNewPostTextACType => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: any): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                likeCount: 0,\r\n                message: state.newPostText\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\r\nimport classes from './Posts.module.css'\r\n\r\n\r\ntype PostsPropsType = {\r\n    message: string\r\n    likeCount: number\r\n\r\n}\r\n\r\nconst Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.posts}>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://cdn21.img.ria.ru/images/152706/30/1527063075_0:0:1920:1080_600x0_80_0_0_1619231de06a6127896bcf26500c320d.jpg\"\r\n                    alt=\"ava\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like </span>{props.likeCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\nimport Posts from \"./Post/Posts\";\r\nimport classes from \"./Myposts.module.css\"\r\nimport { PostsType} from \"../../../redux/state\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    // dispatch: (action: ProfileActionsTypes) => vo\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n\r\n}\r\n\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Posts message={p.message} likeCount={p.likeCount} key={p.id}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    console.log(newPostElement);\r\n\r\n\r\n    let addPost = () => {\r\n             props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current.value\r\n            props.updateNewPostText(text)\r\n            console.log(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div>\r\n                <h3>My Post</h3>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.buttonSave} onClick={addPost}>Add post</button>\r\n\r\n                </div>\r\n            </div>\r\n            {postsElements}\r\n        </div>)\r\n\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\n\r\nimport {AddPostAC, PostsType, ProfileActionsTypes, UpdateNewPostTextAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {SendMessageAC, UpdateNewMessageBodyAC} from \"../../../redux/dialogsReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\n// type PostsType = {\r\n//     id: number\r\n//     likeCount: number\r\n//     message: string\r\n// }\r\n\r\n// type MyPostsPropsType = {\r\n//      // store: Store\r\n//     // posts: Array<PostsType>\r\n//     // newPostText: string\r\n//     // dispatch: (action: ProfileActionsTypes) => void\r\n//     // addPost: () => void\r\n//     // updateNewPostText: (text: string) => void\r\n// }\r\n\r\n\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//\r\n//                     let state = store.getState()\r\n//                     let addPost = () => {\r\n//                         store.dispatch(AddPostAC())\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = UpdateNewPostTextAC(text)\r\n//                         store.dispatch(action)\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <MyPosts updateNewPostText={onPostChange}\r\n//                                  addPost={addPost}\r\n//                                  posts={state.profilePage.posts}\r\n//                                  newPostText={state.profilePage.newPostText}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\n type MapDispatchToPropsType = {\r\n     addPost: () => void\r\n     updateNewPostText: (text: string) => void\r\n\r\n }\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        updateNewPostText: (text: string) => {\r\n            dispatch(UpdateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, Store>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport classes from './Profile.module.css'\r\nimport MyPosts from \"./Myposts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileActionsTypes} from \"../../redux/profileReducer\";\r\nimport {ProfilePageType} from \"../../redux/state\"\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\nimport {Store} from \"redux\";\r\n\r\ntype ProfilePropsType = {\r\n     // store: Store\r\n    // posts: Array<PostsType>\r\n\r\n     // profilePage: ProfilePageType\r\n     // dispatch: (action: ProfileActionsTypes) => void\r\n}\r\n\r\n\r\nconst Profile  = () => {\r\n    /*let posts = [\r\n        {likeCount: 215, message: \"Hi!!!\"},\r\n        {likeCount: 10, message: \"Hello!!\"},\r\n        {likeCount: 15, message: \"How are you&\"},\r\n        {likeCount: 43, message: \"Good afternoon!!!\"}\r\n    ];*/\r\n    return <div>\r\n        <ProfileInfo />\r\n        {/*<MyPosts newPostText={props.profilePage.newPostText}*/}\r\n                 {/*posts={props.profilePage.posts}*/}\r\n                 {/*dispatch={props.dispatch}*/}\r\n\r\n        {/*/>*/}\r\n        <MyPostsContainer    />\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY_TEXT = \"UPDATE_NEW_MESSAGE_BODY_TEXT\"\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof UpdateNewMessageBodyAC>\r\n    | ReturnType<typeof SendMessageAC>\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateTypeDialogs = typeof initialState;\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Natallia\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Ksenya\"},\r\n        {id: 4, name: \"Danila\"}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi!!!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo-Yo-Yo!!!\"},\r\n        {id: 4, message: \"Yo-Yo-Yo!!!\"}\r\n    ] as Array<MessagesType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\ntype UpdateNewMessageBodyACType = {\r\n    type: typeof UPDATE_NEW_MESSAGE_BODY_TEXT\r\n    newMessage: string\r\n}\r\n\r\nexport const UpdateNewMessageBodyAC = (newMessage: string): UpdateNewMessageBodyACType => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY_TEXT,\r\n        newMessage: newMessage\r\n    }\r\n}\r\n\r\ntype SendMessageACType = {\r\n    type: typeof SEND_MESSAGE\r\n}\r\n\r\nexport const SendMessageAC = (): SendMessageACType => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: any): InitialStateTypeDialogs => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY_TEXT:\r\n           return {\r\n                ...state,\r\n                newMessageBody: action.newMessage\r\n            };\r\n\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n           return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n                newMessageBody: \"\"\r\n            };\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string,\r\n    id: number\r\n}\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/1\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {\r\n    ActionsTypes, InitialStateTypeDialogs,\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport {DialogPageType} from \"../../redux/state\"\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/> );\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(message => <Message message={message.message} id={message.id} key={message.id}/>);\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (newMessageElement.current) {\r\n            let text = newMessageElement.current.value\r\n            props.updateNewMessageBody(text)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.message}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                 <textarea onChange={onMessageChange} ref={newMessageElement}\r\n                           value={props.dialogsPage.newMessageBody}\r\n                           placeholder={\"Enter your message\"}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n\r\n    SendMessageAC, UpdateNewMessageBodyAC,\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {DialogPageType} from \"../../redux/state\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage:() => void\r\n    updateNewMessageBody: (text: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(SendMessageAC())\r\n        },\r\n        updateNewMessageBody: (text: string) => {\r\n            dispatch(UpdateNewMessageBodyAC(text))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\n\r\n\r\nexport type UsersActionsTypes =\r\n    ReturnType<typeof followAC>\r\n    | ReturnType<typeof unFollowAC>\r\n    | SetUsersACType\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n    | ReturnType<typeof toggleIsFetchingAC>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    followed: boolean\r\n    status: string | null\r\n    photos: { small: string, large: string }\r\n    uniqueUrlName: null | string\r\n}\r\n\r\nexport type InitialStateTypeUsers = typeof initialState\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false\r\n\r\n}\r\ntype FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n\r\n}\r\n\r\nexport const followAC = (userId: number): FollowACType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId: userId\r\n    }\r\n};\r\n\r\ntype UnFollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const unFollowAC = (userId: number): UnFollowACType => {\r\n    return {type: UNFOLLOW, userId}\r\n};\r\n\r\ntype SetUsersACType = {\r\n    type: 'SET_USERS'\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsersAC = (users: Array<UsersType>): SetUsersACType => {\r\n    return {type: SET_USERS, users}\r\n}\r\n\r\ntype SetCurrentPageACType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\nexport const setCurrentPageAC = (currentPage: number): SetCurrentPageACType => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n}\r\n\r\ntype SetTotalUsersCountACType = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCountAC = (totalUsersCount: number): SetTotalUsersCountACType => {\r\n    return {type: SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n}\r\n\r\ntype ToggleIsFetchingACType = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsTypes): InitialStateTypeUsers => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n\r\n\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {...state, users: action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\n","import React from \"react\";\r\nimport {UsersType} from \"../../redux/usersReducer\";\r\nimport classes from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/img/images.png\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    // setUsers: (users: Array<UsersType>) => void\r\n    // setCurrentPage: (currentPage: number) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n\r\n                return <span\r\n                    onClick={() => {\r\n                        props.onPageChanged(p)\r\n                    }}\r\n                    className={p === props.currentPage ? classes.selectedPage : \"\"}>{p}</span>\r\n            })}\r\n        </div>\r\n\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={classes.userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button onClick={() => {\r\n                            props.unFollow(u.id)\r\n                        }}>UnFollow</button>\r\n                        : <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>Follow</button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n                <span>\r\n                 <span>\r\n                     <div>{u.name}</div>\r\n                     <div>{u.status}</div>\r\n                 </span>\r\n                 <span><div>{\"city\"}</div>\r\n                     <div>{\"u.location.country\"}</div>\r\n                 </span>\r\n            </span>\r\n            </div>)\r\n        }</div>\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC, toggleIsFetchingAC,\r\n    unFollowAC,\r\n    UsersType\r\n} from \"../../redux/usersReducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport  preLoader from \"../../assets/img/load.gif\"\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                debugger;\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                debugger;\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <img src={preLoader}/> : null }\r\n            <Users users={this.props.users}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   onPageChanged={this.onPageChanged}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unFollow: (userId: number) => {\r\n            dispatch(unFollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UsersType>) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","import React from \"react\";\nimport './App.css';\nimport Header from \"./component/Header/Header\";\nimport Navbar from \"./component/Navbar/Navbar\";\nimport Profile from \"./component/Profile/Profile\";\nimport { Route} from \"react-router-dom\";\nimport {Store} from \"redux\";\nimport DialogsContainer from \"./component/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./component/Users/UsersContainer\";\n\n// type AppPropsType = {\n//     store: Store\n//\n// }\nconst App = () => {\n\n    return (\n        <div className='app-wrapper'>\n            <Header/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path=\"/profile\" render={() => <Profile />}/>\n                <Route path=\"/messages\" render={() => <DialogsContainer   />}/>\n                <Route path=\"/users\" render={() => <UsersContainer/>}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport type InitialStateTypeSidebar = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): InitialStateTypeSidebar => {\r\n    return state\r\n}","import React from 'react';\r\nimport {AnyAction, CombinedState, combineReducers, createStore, Store} from \"redux\";\r\nimport {InitialStateTypeProfile, profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer, InitialStateTypeDialogs} from \"./dialogsReducer\";\r\nimport {InitialStateTypeSidebar, sidebarReducer} from \"./sidebarReducer\";\r\nimport {InitialStateTypeUsers, usersReducer} from \"./usersReducer\";\r\n\r\ntype ReducersType = {\r\n    profilePage: InitialStateTypeProfile,\r\n    dialogsPage: InitialStateTypeDialogs,\r\n    sidebarPage: InitialStateTypeSidebar,\r\n    usersPage: InitialStateTypeUsers\r\n}\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nlet store: Store  = createStore(reducers);\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {Provider} from \"react-redux\";\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App   />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root'));\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  reportWebVitals();\n"],"sourceRoot":""}