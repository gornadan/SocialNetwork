{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Dialogs/Message/Message.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Dialogs.tsx","hoc/withAuthRedidrect.tsx","component/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","classes","message","DialogItem","dialog","active","to","id","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","key","messagesElements","messages","React","createRef","dialogsItem","data","sendMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","SendMessageAC","Component","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,4B,uFCiB7HC,EAPC,SAACC,GACb,OAAO,yBAAKC,UAAWC,IAAQC,SAAUH,EAAMG,U,QCWpCC,EATI,SAACJ,GAChB,OAAO,yBAAKC,UAAWC,IAAQG,OAAS,IAAMH,IAAQI,QAClD,kBAAC,IAAD,CAASC,GAAI,aAAeP,EAAMQ,IAAKR,EAAMS,Q,kCCiD/CC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAfL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXV,KAAM,iBACNW,SAAU,CAACC,IAAUX,GACrBY,YAAa,wBAEzB,6BACI,qDAODC,EAzDC,SAACvB,GAEb,IAAIwB,EAAkBxB,EAAMyB,YAAYC,QACnCC,KAAI,SAAAtB,GAAM,OAAI,kBAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAMD,GAAIH,EAAOG,GAAIoB,IAAKvB,EAAOG,QAEzEqB,EAAmB7B,EAAMyB,YAAYK,SACpCH,KAAI,SAAAxB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASK,GAAIL,EAAQK,GAAIoB,IAAKzB,EAAQK,QAE5DuB,IAAMC,YAiB9B,OACI,yBAAK/B,UAAWC,IAAQwB,SACpB,yBAAKzB,UAAWC,IAAQ+B,aACnBT,GAGL,yBAAKvB,UAAWC,IAAQC,SACpB,6BAAM0B,GACN,kBAACjB,EAAD,CAAqBG,SAXhB,SAACmB,GACdlC,EAAMmC,YAAYD,EAAKE,sB,8BCtCzBC,EAAkB,SAACC,GACjB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SC0BhBE,sBAA8BC,aAdvB,SAACJ,GACnB,MAAO,CACHb,YAAaa,EAAMb,gBAIF,SAACkB,GACtB,MAAO,CACHR,YAAa,SAACC,GACVO,EAASC,YAAcR,UDjB5B,SAA8BS,GAUjC,OAFiCH,YAAQL,EAARK,EANP,SAAC1C,GAAgC,IAClDuC,EAAwBvC,EAAxBuC,OAAWO,EADsC,YACzB9C,EADyB,YAEtD,OAAIuC,EACI,kBAACM,EAAcC,GADJ,kBAAC,IAAD,CAAUvC,GAAG,eCkBzBkC,CAA8FlB","file":"static/js/4.de0197aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3psTL\",\"dialogsItem\":\"Dialogs_dialogsItem__1J_bq\",\"active\":\"Dialogs_active__1nRMj\",\"messages\":\"Dialogs_messages__G7lBl\"};","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string,\r\n    id: number\r\n}\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/1\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {\r\n     DialogPageType\r\n\r\n} from \"../../redux/dialogsReducer\";\r\n\r\nimport {Field, InjectedFormProps,  reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageBody: string) => void\r\n    updateNewMessageBody: (text: string) => void\r\n    isAuth: boolean\r\n\r\n}\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(message => <Message message={message.message} id={message.id} key={message.id}/>);\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage()\r\n    // }\r\n\r\n    // let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     if (newMessageElement.current) {\r\n    //         let text = newMessageElement.current.value\r\n    //         props.updateNewMessageBody(text)\r\n    //     }\r\n    // };\r\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    let addMessage = (data: AddMessageFormType) => {\r\n        props.sendMessage(data.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.message}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addMessage} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props: InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field component={Textarea}\r\n                        name={'newMessageBody'}\r\n                        validate={[required, maxLength50]}\r\n                        placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: React.ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to='login' />\r\n        return( <Component {...restProps as T}/>)\r\n    };\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent\r\n\r\n}","import React from 'react';\r\nimport {\r\n    DialogPageType,\r\n\r\n    SendMessageAC\r\n\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedidrect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage:(newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose <React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n// const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\r\n//\r\n//\r\n// export default DialogsContainer;"],"sourceRoot":""}